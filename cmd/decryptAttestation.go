package cmd

import (
	"fmt"
	"log"

	"github.com/ibm-hyper-protect/contract-go/attestation"
	"github.com/spf13/cobra"

	"github.com/ibm-hyper-protect/contract-cli/common"
)

const (
	ParameterName             = "decryptAttestation"
	ParameterShortDescription = "Decrypt encrypted attestation records"
	ParameterLongDescription  = `Decrypt encrypted attestation record generated by HPCR/RHVS.`

	encryptedAttestationFlagName        = "in"
	encryptedAttestationDefaultPath     = "build/se-checksums.txt.enc"
	encryptedAttestationFlagDescription = "Path to file that stores encrypted attestation records"

	privateKeyFlagName        = "priv"
	privateKeyFlagDescription = "Path to private key"

	decryptedAttestationFlagName        = "out"
	decryptedAttestationDefaultPath     = "build/se-checksums.txt"
	decryptedAttestationFlagDescription = "Path to save the decrypted attestation records"
)

// decryptAttestationCmd represents the decryptAttestation command
var decryptAttestationCmd = &cobra.Command{
	Use:   ParameterName,
	Short: ParameterShortDescription,
	Long:  ParameterLongDescription,
	Run: func(cmd *cobra.Command, args []string) {
		encAttestPath, err := cmd.Flags().GetString(encryptedAttestationFlagName)
		if err != nil {
			log.Fatal(err)
		}
		privateKeyPath, err := cmd.Flags().GetString(privateKeyFlagName)
		if err != nil {
			log.Fatal(err)
		}
		decryptedAttestPath, err := cmd.Flags().GetString(decryptedAttestationFlagName)
		if err != nil {
			log.Fatal(err)
		}

		err = DecryptAttestationRecords(encAttestPath, privateKeyPath, decryptedAttestPath)
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	rootCmd.AddCommand(decryptAttestationCmd)

	decryptAttestationCmd.PersistentFlags().String(encryptedAttestationFlagName, encryptedAttestationDefaultPath, encryptedAttestationFlagDescription)
	decryptAttestationCmd.PersistentFlags().String(privateKeyFlagName, "", privateKeyFlagDescription)
	decryptAttestationCmd.PersistentFlags().String(decryptedAttestationFlagName, decryptedAttestationDefaultPath, decryptedAttestationFlagDescription)
}

func DecryptAttestationRecords(encryptedAttestationRecordsPath, privateKeyPath, decryptedAttestationPath string) error {
	if !common.CheckFileFolderExists(encryptedAttestationRecordsPath) || !common.CheckFileFolderExists(privateKeyPath) {
		log.Fatal("The path to encrypted attestation records file or private key doesn't exists")
	}

	encryptedChecksum, err := common.ReadDataFromFile(encryptedAttestationRecordsPath)
	if err != nil {
		log.Fatal(err)
	}
	privateKey, err := common.ReadDataFromFile(privateKeyPath)
	if err != nil {
		log.Fatal(err)
	}

	decryptedAttestationRecords, err := attestation.HpcrGetAttestationRecords(encryptedChecksum, privateKey)
	if err != nil {
		log.Fatal(err)
	}

	err = common.WriteDataToFile(decryptedAttestationPath, decryptedAttestationRecords)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Successfully decrypted attestation records")
	return nil
}
